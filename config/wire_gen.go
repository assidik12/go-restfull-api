// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"github.com/assidik12/go-restfull-api/internal/delivery/http/handler"
	"github.com/assidik12/go-restfull-api/internal/delivery/http/middleware"
	"github.com/assidik12/go-restfull-api/internal/delivery/http/route"
	"github.com/assidik12/go-restfull-api/internal/infrastructure"
	"github.com/assidik12/go-restfull-api/internal/repository/mysql"
	"github.com/assidik12/go-restfull-api/internal/service"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"net/http"
)

// Injectors from injector.go:

func InitializedServer() *http.Server {
	db := infrastructure.DatabaseConnection()
	userRepository := mysql.NewUserRepository(db)
	v := _wireValue
	validate := validator.New(v...)
	userService := service.NewUserService(userRepository, db, validate)
	userHandler := handler.NewUserHandler(userService)
	productRepository := mysql.NewProductRepository(db)
	productService := service.NewProductService(productRepository, db, validate)
	productHandler := handler.NewProductHandler(productService)
	transactionRepository := mysql.NewTransactionRepository(db)
	trancationService := service.NewTrancationService(transactionRepository, db, validate, userRepository)
	transactionHandler := handler.NewTransactionHandler(trancationService)
	router := route.NewRouter(userHandler, productHandler, transactionHandler)
	authMiddleware := middleware.NewAuthMiddleware(router)
	server := NewServer(authMiddleware)
	return server
}

var (
	_wireValue = []validator.Option{}
)

// injector.go:

var validatorSet = wire.NewSet(validator.New, wire.Value([]validator.Option{}))

var userSet = wire.NewSet(mysql.NewUserRepository, service.NewUserService, handler.NewUserHandler)

var productSet = wire.NewSet(mysql.NewProductRepository, service.NewProductService, handler.NewProductHandler)

var transactionSet = wire.NewSet(mysql.NewTransactionRepository, service.NewTrancationService, handler.NewTransactionHandler)
